version: '3.9'

## With this it will launch default network, for production environment it's recommended to create
## an external network to allow communication between nodes
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.5
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:5.2.5
    container_name: kafka
    hostname: kafka
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-network

  schema-registry:
    image: confluentinc/cp-schema-registry:5.2.5
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:29092"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
#      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
    networks:
      - kafka-network


  rest-proxy:
    image: confluentinc/cp-kafka-rest:5.2.5
    hostname: kafka-rest-proxy
    ports:
      - 8082:8082
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081/
    depends_on:
      - kafka
      - schema-registry
    networks:
      - kafka-network

  control-center:
    image: confluentinc/cp-enterprise-control-center:5.2.5
    hostname: control-center
    container_name: control-center
    ports:
    - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:29092"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_CONNECT_CLUSTER: http://localhost:28082
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - kafka-network


  connect:
    image: confluentinc/cp-kafka-connect:5.2.5
    hostname: connect
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
      - rest-proxy
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:29092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: zookeeper:2181
      CONNECT_PLUGIN_PATH: "/usr/share/java"
    networks:
      - kafka-network

  ksql:
    image: confluentinc/cp-ksql-server:5.2.5
    ports:
      - 8088:8088
    environment:
      KSQL_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SERVICE_ID: ksql_service_docker
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      - kafka
      - schema-registry
    networks:
      - kafka-network

  producer:
    build: ./producer
    environment:
      KAFKA_BROKER_URL: PLAINTEXT://kafka:29092
      ORDERS_TOPIC: sample-etl.orders
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      NUM_PARTITIONS: 1
      NUM_REPLICAS: 1
      NUM_MESSAGES: 1000
    depends_on:
      - kafka
      - schema-registry
    networks:
      - kafka-network

  postgres:
    image: postgres:11.2
    hostname: postgres
    ports:
      - 5432:5432
    volumes:
      - ".postgres/sql:/docker-entrypoint-initdb.d"
    environment:
      POSTGRES_USER: chetna
      POSTGRES_PASSWORD: d0nt@sk
      POSTGRES_DB: etl
    networks:
      - kafka-network

networks:
  kafka-network: